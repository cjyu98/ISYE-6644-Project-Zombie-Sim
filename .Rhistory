# write in the same order of formation formula
target.stats <- c(overall_mean_deg*n/2, gr1_mean_deg*n/2, perc_in_grp*n/4, 50)
coef.diss <- dissolution_coefs(dissolution = ~offset(edges), duration = 20, d.rate = 0.001)
coef.diss
est <- netest(nw, formation, target.stats, coef.diss) #estimate coefficients of the network
# network set up, have two groups for different risks
n = 1000 # number of people
nw <- network_initialize(n = n)
nw <- set_vertex_attribute(nw, attrname = "risk", value = rep(0:1, each = 250))
formation <- ~edges + nodefactor("risk") + nodematch("risk") + concurrent
#nodefactor: likelihood of node forming an edge
#nodematch: tendency to for nodes of similar attributes to form an edge
# concurrent: # having at least "two partners"/two connected nodes at any time, can constraint with degrange()
# mean degree values (all needs to be tuned/decide on what makes logical sense)
overall_mean_deg = 0.5
gr1_mean_deg = 0.75
perc_in_grp = 0.8 # percentage of partnerships that occur from people within same risk group
# write in the same order of formation formula
target.stats <- c(overall_mean_deg*n/2, gr1_mean_deg*n/2, perc_in_grp*n/4, 50)
coef.diss <- dissolution_coefs(dissolution = ~offset(edges), duration = 20, d.rate = 0.001)
coef.diss
est <- netest(nw, formation, target.stats, coef.diss) #estimate coefficients of the network
dx <- netdx(est, nsims = 10, nsteps = 1000, ncores = 5
nwstats.formula = ~edges + meandeg + degree(0:4) + concurrent,
dx <- netdx(est, nsims = 10, nsteps = 1000, ncores = 5,
nwstats.formula = ~edges + meandeg + degree(0:4) + concurrent,
keep.tedgelist = TRUE) # we'll see how many have up to 4 degrees, can adjust number
plot(dx)
print(dx)
# network set up, have two groups for different risks
n = 1000 # number of people
nw <- network_initialize(n = n)
nw <- set_vertex_attribute(nw, attrname = "risk", value = rep(0:1, each = 250))
formation <- ~edges + nodefactor("risk") + nodematch("risk") + concurrent
#nodefactor: likelihood of node forming an edge
#nodematch: tendency to for nodes of similar attributes to form an edge
# concurrent: # having at least "two partners"/two connected nodes at any time, can constraint with degrange()
# mean degree values (all needs to be tuned/decide on what makes logical sense)
overall_mean_deg = 0.5
gr1_mean_deg = 0.75
perc_in_grp = 0.8 # percentage of partnerships that occur from people within same risk group
# write in the same order of formation formula, the concurrent # needs to be tuned
target.stats <- c(overall_mean_deg*n/2, gr1_mean_deg*n/2, perc_in_grp*n/4, 50)
coef.diss <- dissolution_coefs(dissolution = ~offset(edges), duration = 5, d.rate = 0.001)
coef.diss
est <- netest(nw, formation, target.stats, coef.diss) #estimate coefficients of the network
dx <- netdx(est, nsims = 10, nsteps = 1000, ncores = 5,
nwstats.formula = ~edges + meandeg + degree(0:4) + concurrent,
keep.tedgelist = TRUE) # we'll see how many have up to 4 degrees, can adjust number
plot(dx)
print(dx)
# network set up, have two groups for different risks
n = 1000 # number of people
nw <- network_initialize(n = n)
nw <- set_vertex_attribute(nw, attrname = "risk", value = rep(0:1, each = 250))
formation <- ~edges + nodefactor("risk") + nodematch("risk") + concurrent
#nodefactor: likelihood of node forming an edge
#nodematch: tendency to for nodes of similar attributes to form an edge
# concurrent: # having at least "two partners"/two connected nodes at any time, can constraint with degrange()
# mean degree values (all needs to be tuned/decide on what makes logical sense)
overall_mean_deg = 0.5
gr1_mean_deg = 0.75
perc_in_grp = 0.8 # percentage of partnerships that occur from people within same risk group
# write in the same order of formation formula, the concurrent # needs to be tuned
target.stats <- c(overall_mean_deg*n/2, gr1_mean_deg*n/2, perc_in_grp*n/4, 50)
coef.diss <- dissolution_coefs(dissolution = ~offset(edges), duration = 100, d.rate = 0.001)
# need to adjust duration for when edges dissolve e.g. if duration = 50, 1/50 edges will dissolve each day,
coef.diss
est <- netest(nw, formation, target.stats, coef.diss) #estimate coefficients of the network
dx <- netdx(est, nsims = 10, nsteps = 1000, ncores = 5,
nwstats.formula = ~edges + meandeg + degree(0:4) + concurrent,
keep.tedgelist = TRUE) # we'll see how many have up to 4 degrees, can adjust number
plot(dx)
print(dx)
start <- Sys.time()
param <- param.net(inf.prob = 0.5,
inter.eff = rnorm(1), inter.start = 500, # some kind of distribution w/n
rec.rate = 0.02) #di.rate = 0.001, ds.rate = 0.001, dr.rate = 0.001, a.rate = 0.001 for average mortality
# https://statnet.org/nme/d4-s3-Demography.html
#infection probability, efficacy of intervention, when does it intervene
init <- init.net(i.num = 5, r.num = 0) #how many people are infected/recovered at the start
control <- control.net(type = "SIR", nsteps = 1000, nsims = 10, ncores = 5) #simulation parameters
sim <- netsim(est, param, init, control) #run the sim
plot(sim)
end <- Sys.time()
end - start
?rnorm
start <- Sys.time()
param <- param.net(inf.prob = 0.5, inf.prob.g2 = 0.75
inter.eff = rnorm(1), inter.start = rnorm(1, mean = 500, sd = 20), # when cure is discovered, this needs to be tuned
start <- Sys.time()
param <- param.net(inf.prob = 0.5, inf.prob.g2 = 0.75
inter.eff = rnorm(1), inter.start = rnorm(1, mean = 500, sd = 20),
start <- Sys.time()
param <- param.net(inf.prob = 0.5, inf.prob.g2 = 0.75,
inter.eff = rnorm(1), inter.start = rnorm(1, mean = 500, sd = 20), # cure, distributions to be tuned
rec.rate = 0.02, rec.rate.g2 = 0.04) # recovery rate with immunity
#di.rate = 0.001, ds.rate = 0.001, dr.rate = 0.001, a.rate = 0.001 for average mortality
# https://statnet.org/nme/d4-s3-Demography.html
#infection probability, efficacy of intervention, when does it intervene
init <- init.net(i.num = 5, r.num = 0) #how many people are infected/recovered at the start
control <- control.net(type = "SIR", nsteps = 1000, nsims = 10, ncores = 5) #simulation parameters
sim <- netsim(est, param, init, control) #run the sim
start <- Sys.time()
param <- param.net(inf.prob = 0.5, inf.prob.g2 = 0.75,
inter.eff = rnorm(1), inter.start = rnorm(1, mean = 500, sd = 20), # cure, distributions to be tuned
rec.rate = 0.02, rec.rate.g2 = 0.04) # recovery rate with immunity
#di.rate = 0.001, ds.rate = 0.001, dr.rate = 0.001, a.rate = 0.001 for average mortality
# https://statnet.org/nme/d4-s3-Demography.html
#infection probability, efficacy of intervention, when does it intervene
init <- init.net(i.num = 5, r.num = 0) #how many people are infected/recovered at the start
control <- control.net(type = "SIR", nsteps = 1000, nsims = 10, ncores = 5) #simulation parameters
sim <- netsim(est, param, init, control) #run the sim
start <- Sys.time()
param <- param.net(inf.prob = 0.5, inf.prob.g2 = 0.75,
inter.eff = rnorm(1), inter.start = rnorm(1, mean = 500, sd = 20), # cure, distributions to be tuned
rec.rate = 0.02, rec.rate.g2 = 0.04) # recovery rate with immunity
#di.rate = 0.001, ds.rate = 0.001, dr.rate = 0.001, a.rate = 0.001 for average mortality
# https://statnet.org/nme/d4-s3-Demography.html
#infection probability, efficacy of intervention, when does it intervene
init <- init.net(i.num = 5, r.num = 0) #how many people are infected/recovered at the start
control <- control.net(type = "SIR", nsteps = 1000, nsims = 10, ncores = 5, epi.by = "risk") #simulation parameters
sim <- netsim(est, param, init, control) #run the sim
dx <- netdx(est, nsims = 10, nsteps = 1000, ncores = 5,
nwstats.formula = ~edges + meandeg + degree(0:4, by = "risk") + concurrent,
keep.tedgelist = TRUE) # we'll see how many have up to 4 degrees, can adjust number
plot(dx)
print(dx)
start <- Sys.time()
param <- param.net(inf.prob = 0.5, inf.prob.g2 = 0.75,
inter.eff = rnorm(1), inter.start = rnorm(1, mean = 500, sd = 20), # cure, distributions to be tuned
rec.rate = 0.02, rec.rate.g2 = 0.04) # recovery rate with immunity
#di.rate = 0.001, ds.rate = 0.001, dr.rate = 0.001, a.rate = 0.001 for average mortality
# https://statnet.org/nme/d4-s3-Demography.html
#infection probability, efficacy of intervention, when does it intervene
init <- init.net(i.num = 5, r.num = 0) #how many people are infected/recovered at the start
control <- control.net(type = "SIR", nsteps = 1000, nsims = 10, ncores = 5) #simulation parameters
sim <- netsim(est, param, init, control) #run the sim
start <- Sys.time()
param <- param.net(inf.prob = 0.5, inf.prob.g2 = 0.75,
inter.eff = rnorm(1), inter.start = rnorm(1, mean = 500, sd = 20), # cure, distributions to be tuned
rec.rate = 0.02, rec.rate.g2 = 0.04) # recovery rate with immunity
#di.rate = 0.001, ds.rate = 0.001, dr.rate = 0.001, a.rate = 0.001 for average mortality
# https://statnet.org/nme/d4-s3-Demography.html
#infection probability, efficacy of intervention, when does it intervene
init <- init.net(i.num = 5, r.num = 2) #how many people are infected/recovered at the start
control <- control.net(type = "SIR", nsteps = 1000, nsims = 10, ncores = 5) #simulation parameters
sim <- netsim(est, param, init, control) #run the sim
dx <- netdx(est, nsims = 10, nsteps = 1000, ncores = 5,
nwstats.formula = ~edges + meandeg + degree(0:4, by = "risk") + concurrent) # we'll see how many have up to 4 degrees, can adjust number
plot(dx)
print(dx)
start <- Sys.time()
param <- param.net(inf.prob = 0.5, inf.prob.g2 = 0.75,
inter.eff = rnorm(1), inter.start = rnorm(1, mean = 500, sd = 20), # cure, distributions to be tuned
rec.rate = 0.02, rec.rate.g2 = 0.04) # recovery rate with immunity
#di.rate = 0.001, ds.rate = 0.001, dr.rate = 0.001, a.rate = 0.001 for average mortality
# https://statnet.org/nme/d4-s3-Demography.html
#infection probability, efficacy of intervention, when does it intervene
init <- init.net(i.num = 5, r.num = 0) #how many people are infected/recovered at the start
control <- control.net(type = "SIR", nsteps = 1000, nsims = 10, ncores = 5) #simulation parameters
sim <- netsim(est, param, init, control) #run the sim
start <- Sys.time()
param <- param.net(inf.prob.g0 = 0.5, inf.prob.g1 = 0.75,
inter.eff = rnorm(1), inter.start = rnorm(1, mean = 500, sd = 20), # cure, distributions to be tuned
rec.rate.g0 = 0.02, rec.rate.g1 = 0.04) # recovery rate with immunity
#di.rate = 0.001, ds.rate = 0.001, dr.rate = 0.001, a.rate = 0.001 for average mortality
# https://statnet.org/nme/d4-s3-Demography.html
#infection probability, efficacy of intervention, when does it intervene
init <- init.net(i.num = 5, r.num = 0) #how many people are infected/recovered at the start
control <- control.net(type = "SIR", nsteps = 1000, nsims = 10, ncores = 5) #simulation parameters
sim <- netsim(est, param, init, control) #run the sim
start <- Sys.time()
param <- param.net(inf.prob = 0.5, inf.prob.g1 = 0.75,
inter.eff = rnorm(1), inter.start = rnorm(1, mean = 500, sd = 20), # cure, distributions to be tuned
rec.rate = 0.02, rec.rate.g1 = 0.04) # recovery rate with immunity
#di.rate = 0.001, ds.rate = 0.001, dr.rate = 0.001, a.rate = 0.001 for average mortality
# https://statnet.org/nme/d4-s3-Demography.html
#infection probability, efficacy of intervention, when does it intervene
init <- init.net(i.num = 5, r.num = 0) #how many people are infected/recovered at the start
control <- control.net(type = "SIR", nsteps = 1000, nsims = 10, ncores = 5) #simulation parameters
sim <- netsim(est, param, init, control) #run the sim
plot(sim)
end <- Sys.time()
end - start
summary(sim, 500)
# network set up, have two groups for different risks
n = 1000 # number of people
nw <- network_initialize(n = n)
nw <- set_vertex_attribute(nw, attrname = "risk", value = rep(0:1, each = 250))
formation <- ~edges + nodefactor("risk") + nodematch("risk") + concurrent
#nodefactor: likelihood of node forming an edge
#nodematch: tendency to for nodes of similar attributes to form an edge
# concurrent: # having at least "two partners"/two connected nodes at any time, can constraint with degrange()
# mean degree values (all needs to be tuned/decide on what makes logical sense)
overall_mean_deg = 0.5
gr1_mean_deg = 0.75
perc_in_grp = 0.8 # percentage of partnerships that occur from people within same risk group
# write in the same order of formation formula, the concurrent # needs to be tuned
target.stats <- c(overall_mean_deg*n/2, gr1_mean_deg*n/2, perc_in_grp*n/4, 50)
coef.diss <- dissolution_coefs(dissolution = ~offset(edges), duration = 100) #d.rate = 0.001)
# need to adjust duration for when edges dissolve e.g. if duration = 50, 1/50 edges will dissolve each day,
coef.diss
est <- netest(nw, formation, target.stats, coef.diss) #estimate coefficients of the network
dx <- netdx(est, nsims = 10, nsteps = 1000, ncores = 5,
nwstats.formula = ~edges + meandeg + degree(0:4, by = "risk") + concurrent) # we'll see how many have up to 4 degrees, can adjust number
plot(dx)
print(dx)
# network set up, have two groups for different risks
n = 1000 # number of people
nw <- network_initialize(n = n)
nw <- set_vertex_attribute(nw, attrname = "risk", value = rep(0:1, each = 250))
formation <- ~edges + nodefactor("risk") + nodematch("risk") + concurrent
#nodefactor: likelihood of node forming an edge
#nodematch: tendency to for nodes of similar attributes to form an edge
# concurrent: # having at least "two partners"/two connected nodes at any time, can constraint with degrange()
# mean degree values (all needs to be tuned/decide on what makes logical sense)
overall_mean_deg = 0.5
gr1_mean_deg = 0.75
perc_in_grp = 0.8 # percentage of partnerships that occur from people within same risk group
# write in the same order of formation formula, the concurrent # needs to be tuned
target.stats <- c(overall_mean_deg*n/2, gr1_mean_deg*n/2, perc_in_grp*n/4, 50)
coef.diss <- dissolution_coefs(dissolution = ~offset(edges), duration = 50) #d.rate = 0.001)
# need to adjust duration for when edges dissolve e.g. if duration = 50, 1/50 edges will dissolve each day,
coef.diss
est <- netest(nw, formation, target.stats, coef.diss) #estimate coefficients of the network
dx <- netdx(est, nsims = 10, nsteps = 1000, ncores = 5,
nwstats.formula = ~edges + meandeg + degree(0:4, by = "risk") + concurrent) # we'll see how many have up to 4 degrees, can adjust number
plot(dx)
print(dx)
start <- Sys.time()
param <- param.net(inf.prob = 0.5, inf.prob.g1 = 0.75,
inter.eff = rnorm(1), inter.start = rnorm(1, mean = 500, sd = 20), # cure, distributions to be tuned
rec.rate = 0.02, rec.rate.g1 = 0.04) # recovery rate with immunity
#di.rate = 0.001, ds.rate = 0.001, dr.rate = 0.001, a.rate = 0.001 for average mortality
# https://statnet.org/nme/d4-s3-Demography.html
#infection probability, efficacy of intervention, when does it intervene
init <- init.net(i.num = 5, r.num = 0) #how many people are infected/recovered at the start
control <- control.net(type = "SIR", nsteps = 1000, nsims = 10, ncores = 5) #simulation parameters
sim <- netsim(est, param, init, control) #run the sim
plot(sim)
end <- Sys.time()
end - start
# network set up, have two groups for different risks
n = 1000 # number of people
nw <- network_initialize(n = n)
nw <- set_vertex_attribute(nw, attrname = "risk", value = rep(0:1, each = 250))
formation <- ~edges + nodefactor("risk") + nodematch("risk") + concurrent
#nodefactor: likelihood of node forming an edge
#nodematch: tendency to for nodes of similar attributes to form an edge
# concurrent: # having at least "two partners"/two connected nodes at any time, can constraint with degrange()
# mean degree values (all needs to be tuned/decide on what makes logical sense)
overall_mean_deg = 0.5
gr1_mean_deg = 0.75
perc_in_grp = 0.8 # percentage of partnerships that occur from people within same risk group
# write in the same order of formation formula, the concurrent # needs to be tuned
target.stats <- c(overall_mean_deg*n/2, gr1_mean_deg*n/2, perc_in_grp*n/4, 50)
coef.diss <- dissolution_coefs(dissolution = ~offset(edges), duration = 5) #d.rate = 0.001)
# need to adjust duration for when edges dissolve
coef.diss
est <- netest(nw, formation, target.stats, coef.diss) #estimate coefficients of the network
dx <- netdx(est, nsims = 10, nsteps = 1000, ncores = 5,
nwstats.formula = ~edges + meandeg + degree(0:4, by = "risk") + concurrent) # we'll see how many have up to 4 degrees, can adjust number
plot(dx)
print(dx)
start <- Sys.time()
param <- param.net(inf.prob = 0.5, inf.prob.g1 = 0.75,
inter.eff = rnorm(1), inter.start = rnorm(1, mean = 500, sd = 20), # cure, distributions to be tuned
rec.rate = 0.02, rec.rate.g1 = 0.04) # recovery rate with immunity
#di.rate = 0.001, ds.rate = 0.001, dr.rate = 0.001, a.rate = 0.001 for average mortality
# https://statnet.org/nme/d4-s3-Demography.html
#infection probability, efficacy of intervention, when does it intervene
init <- init.net(i.num = 5, r.num = 0) #how many people are infected/recovered at the start
control <- control.net(type = "SIR", nsteps = 1000, nsims = 10, ncores = 5) #simulation parameters
sim <- netsim(est, param, init, control) #run the sim
plot(sim)
end <- Sys.time()
end - start
# network set up, have two groups for different risks
n = 500 # number of people
nw <- network_initialize(n = n)
nw <- set_vertex_attribute(nw, attrname = "risk", value = rep(0:1, each = 250))
formation <- ~edges + nodefactor("risk") + nodematch("risk") + concurrent
#nodefactor: likelihood of node forming an edge
#nodematch: tendency to for nodes of similar attributes to form an edge
#concurrent: # having at least "two partners"/two connected nodes at any time, can constraint with degrange()
# mean degree values (all needs to be tuned/decide on what makes logical sense)
overall_mean_deg = 0.5
gr1_mean_deg = 0.75
perc_in_grp = 0.8 # percentage of partnerships that occur from people within same risk group
perc_concurrent = 0.1 # percentage of concurrent nodes out of the total
# write in the same order of formation formula, the concurrent # needs to be tuned
target.stats <- c(overall_mean_deg*n/2, gr1_mean_deg*n/2, perc_in_grp*n/4, perc_concurrent*n)
coef.diss <- dissolution_coefs(dissolution = ~offset(edges), duration = 5) #d.rate = 0.001)
# need to adjust duration for when edges dissolve
coef.diss
est <- netest(nw, formation, target.stats, coef.diss) #estimate coefficients of the network
dx <- netdx(est, nsims = 10, nsteps = 1000, ncores = 5,
nwstats.formula = ~edges + meandeg + degree(0:4, by = "risk") + concurrent) # we'll see how many have up to 4 degrees, can adjust number
plot(dx)
print(dx)
start <- Sys.time()
param <- param.net(inf.prob = 0.5, inf.prob.g1 = 0.75,
inter.eff = rnorm(1), inter.start = rnorm(1, mean = 250, sd = 20), # cure, distributions to be tuned
rec.rate = 0.02, rec.rate.g1 = 0.04) # recovery rate with immunity
#di.rate = 0.001, ds.rate = 0.001, dr.rate = 0.001, a.rate = 0.001 for average mortality
# https://statnet.org/nme/d4-s3-Demography.html
#infection probability, efficacy of intervention, when does it intervene
init <- init.net(i.num = 5, r.num = 0) #how many people are infected/recovered at the start
control <- control.net(type = "SIR", nsteps = 500, nsims = 10, ncores = 5) #simulation parameters
sim <- netsim(est, param, init, control) #run the sim
plot(sim)
end <- Sys.time()
end - start
start <- Sys.time()
param <- param.net(inf.prob = 0.5, inf.prob.g1 = 0.75,
inter.eff = rnorm(1), inter.start = rnorm(1, mean = 250, sd = 20), # cure, distributions to be tuned, rnorms could be negative....
rec.rate = 0.002, rec.rate.g1 = 0.001) # recovery rate with immunity
#di.rate = 0.001, ds.rate = 0.001, dr.rate = 0.001, a.rate = 0.001 for average mortality
# https://statnet.org/nme/d4-s3-Demography.html
#infection probability, efficacy of intervention, when does it intervene
init <- init.net(i.num = 5, r.num = 0) #how many people are infected/recovered at the start
control <- control.net(type = "SIR", nsteps = 500, nsims = 10, ncores = 5) #simulation parameters
sim <- netsim(est, param, init, control) #run the sim
plot(sim)
end <- Sys.time()
end - start
# network set up, have two groups for different risks
n = 500 # number of people
nw <- network_initialize(n = n)
nw <- set_vertex_attribute(nw, attrname = "risk", value = rep(0:1, each = 250))
formation <- ~edges + nodefactor("risk") + nodematch("risk") + concurrent
#nodefactor: likelihood of node forming an edge
#nodematch: tendency to for nodes of similar attributes to form an edge
#concurrent: # having at least "two partners"/two connected nodes at any time, can constraint with degrange()
# mean degree values (all needs to be tuned/decide on what makes logical sense)
overall_mean_deg = 0.5
gr1_mean_deg = 0.75
perc_in_grp = 0.8 # percentage of partnerships that occur from people within same risk group
perc_concurrent = 0.1 # percentage of concurrent nodes out of the total
# write in the same order of formation formula, the concurrent # needs to be tuned
target.stats <- c(overall_mean_deg*n/2, gr1_mean_deg*n/2, perc_in_grp*n/4, perc_concurrent*n)
coef.diss <- dissolution_coefs(dissolution = ~offset(edges), duration = 5, d.rate = 0.001)
# need to adjust duration for when edges dissolve
coef.diss
est <- netest(nw, formation, target.stats, coef.diss) #estimate coefficients of the network
start <- Sys.time()
param <- param.net(inf.prob = 0.5, inf.prob.g1 = 0.75,
inter.eff = rnorm(1), inter.start = rnorm(1, mean = 250, sd = 20), # cure, distributions to be tuned, rnorms could be negative....
rec.rate = 0.002, rec.rate.g1 = 0.001, # recovery rate with immunity
di.rate = 0.001, ds.rate = 0.001, dr.rate = 0.001, a.rate = 0.001) #for average mortality
# https://statnet.org/nme/d4-s3-Demography.html
#infection probability, efficacy of intervention, when does it intervene
init <- init.net(i.num = 5, r.num = 0) #how many people are infected/recovered at the start
control <- control.net(type = "SIR", nsteps = 500, nsims = 10, ncores = 5) #simulation parameters
sim <- netsim(est, param, init, control) #run the sim
plot(sim)
end <- Sys.time()
end - start
start <- Sys.time()
param <- param.net(inf.prob = 0.5, inf.prob.g1 = 0.75,
inter.eff = rnorm(1), inter.start = rnorm(1, mean = 250, sd = 20), # cure, distributions to be tuned, rnorms could be negative....
rec.rate = 0.002, rec.rate.g1 = 0.001, # recovery rate with immunity
di.rate = 0.001, ds.rate = 0.01, dr.rate = 0.01, a.rate = 0.001) #for average mortality
# https://statnet.org/nme/d4-s3-Demography.html
#infection probability, efficacy of intervention, when does it intervene
init <- init.net(i.num = 5, r.num = 0) #how many people are infected/recovered at the start
control <- control.net(type = "SIR", nsteps = 500, nsims = 10, ncores = 5) #simulation parameters
sim <- netsim(est, param, init, control) #run the sim
plot(sim)
end <- Sys.time()
end - start
start <- Sys.time()
param <- param.net(inf.prob = 0.5, inf.prob.g1 = 0.75,
inter.eff = rnorm(1), inter.start = rnorm(1, mean = 250, sd = 20), # cure, distributions to be tuned, rnorms could be negative....
rec.rate = 0.002, rec.rate.g1 = 0.001, # recovery rate with immunity
di.rate = 0.1, di.rate.g1 = 0.1,
ds.rate = 0.1, ds.rate.g1 = 0.2,
dr.rate = 0.01, dr.rate.g1 = 0.01,
a.rate = 0.001, a.rate.g1 = 0.001) #for average mortality rate of each population, to be tuned
#infection probability, efficacy of intervention, when does it intervene
init <- init.net(i.num = 5, r.num = 0) #how many people are infected/recovered at the start
control <- control.net(type = "SIR", nsteps = 500, nsims = 10, ncores = 5) #simulation parameters
sim <- netsim(est, param, init, control) #run the sim
plot(sim)
end <- Sys.time()
end - start
# network set up, have two groups for different risks
n = 500 # number of people
nw <- network_initialize(n = n)
nw <- set_vertex_attribute(nw, attrname = "risk", value = rep(0:1, each = 250))
formation <- ~edges + nodefactor("risk") + nodematch("risk") + concurrent
#nodefactor: likelihood of node forming an edge
#nodematch: tendency to for nodes of similar attributes to form an edge
#concurrent: # having at least "two partners"/two connected nodes at any time, can constraint with degrange()
# mean degree values (all needs to be tuned/decide on what makes logical sense)
overall_mean_deg = 0.5
gr1_mean_deg = 0.75
perc_in_grp = 0.8 # percentage of partnerships that occur from people within same risk group
perc_concurrent = 0.1 # percentage of concurrent nodes out of the total
# write in the same order of formation formula, the concurrent # needs to be tuned
target.stats <- c(overall_mean_deg*n/2, gr1_mean_deg*n/2, perc_in_grp*n/4, perc_concurrent*n)
coef.diss <- dissolution_coefs(dissolution = ~offset(edges), duration = 5)
# need to adjust duration for when edges dissolve
coef.diss
est <- netest(nw, formation, target.stats, coef.diss) #estimate coefficients of the network
start <- Sys.time()
param <- param.net(inf.prob = 0.5, inf.prob.g1 = 0.75,
inter.eff = abs(rnorm(1)), inter.start = abs(rnorm(1, mean = 250, sd = 20)), # cure, distributions to be tuned, rnorms could be negative....
rec.rate = 0.002, rec.rate.g1 = 0.001) # recovery rate with immunity
#infection probability, efficacy of intervention, when does it intervene
init <- init.net(i.num = 5, r.num = 0) #how many people are infected/recovered at the start
control <- control.net(type = "SIR", nsteps = 500, nsims = 10, ncores = 5) #simulation parameters
sim <- netsim(est, param, init, control) #run the sim
plot(sim)
end <- Sys.time()
end - start
start <- Sys.time()
param <- param.net(inf.prob = 0.5, inf.prob.g1 = 0.75,
inter.eff = abs(rnorm(1)), inter.start = abs(rnorm(1, mean = 250, sd = 20)), # cure, distributions to be tuned, rnorms could be negative....
rec.rate = 0, rec.rate.g1 = 0) # recovery rate with immunity
#infection probability, efficacy of intervention, when does it intervene
init <- init.net(i.num = 5, r.num = 0) #how many people are infected/recovered at the start
control <- control.net(type = "SIR", nsteps = 500, nsims = 10, ncores = 5) #simulation parameters
sim <- netsim(est, param, init, control) #run the sim
plot(sim)
end <- Sys.time()
end - start
start <- Sys.time()
param <- param.net(inf.prob = 0.5, inf.prob.g1 = 0.75,
inter.eff = abs(rnorm(1)), inter.start = abs(rnorm(1, mean = 250, sd = 20)), # cure, distributions to be tuned, rnorms could be negative....
rec.rate = 0.001, rec.rate.g1 = 0.001) # recovery rate with immunity
#infection probability, efficacy of intervention, when does it intervene
init <- init.net(i.num = 5, r.num = 0) #how many people are infected/recovered at the start
control <- control.net(type = "SIR", nsteps = 500, nsims = 10, ncores = 5) #simulation parameters
sim <- netsim(est, param, init, control) #run the sim
plot(sim)
end <- Sys.time()
end - start
View(param)
parallel::detectCores()
View(sim)
summary(sim)
print(sim)
summary(sim, 500)
sims = rep(NA, 10)
start <- Sys.time()
sims = rep(NA, 10)
for(i in 1:10){
param <- param.net(inf.prob = 0.5, inf.prob.g1 = 0.75,
inter.eff = abs(rnorm(1)), inter.start = abs(rnorm(1, mean = 250, sd = 20)), # cure, distributions to be tuned, rnorms could be negative....
rec.rate = 0.001, rec.rate.g1 = 0.001) # recovery rate with immunity
#infection probability, efficacy of intervention, when does it intervene
init <- init.net(i.num = 5, r.num = 0) #how many people are infected/recovered at the start
control <- control.net(type = "SIR", nsteps = 500, nsims = 2, ncores = 5) #simulation parameters
sim <- netsim(est, param, init, control) #run the sim
sims[i] = sim
}
start <- Sys.time()
param <- param.net(inf.prob = 0.5, inf.prob.g1 = 0.75,
inter.eff = abs(rnorm(1)), inter.start = abs(rnorm(1, mean = 250, sd = 20)), # cure, distributions to be tuned, rnorms could be negative....
rec.rate = 0.001, rec.rate.g1 = 0.001) # recovery rate with immunity
#infection probability, efficacy of intervention, when does it intervene
init <- init.net(i.num = 5, r.num = 0) #how many people are infected/recovered at the start
control <- control.net(type = "SIR", nsteps = 500, nsims = 10, ncores = 5) #simulation parameters
sim <- netsim(est, param, init, control) #run the sim
plot(sim)
summary(sim, 500)
end <- Sys.time()
end - start
summary(sim, 500)$model.statistics
View(sims)
View(sim)
rm(sims)
df <- as.data.frame(sim, out = "mean")
View(df)
View(df)
start <- Sys.time()
param <- param.net(inf.prob = 0.5, inf.prob.g1 = 0.75,
inter.eff = abs(rnorm(1)), inter.start = abs(rnorm(1, mean = 250, sd = 20)), # cure, distributions to be tuned, rnorms could be negative....
rec.rate = 0.001, rec.rate.g1 = 0.001) # recovery rate with immunity
#infection probability, efficacy of intervention, when does it intervene
init <- init.net(i.num = 5, r.num = 0) #how many people are infected/recovered at the start
control <- control.net(type = "SIR", nsteps = 500, nsims = 1, ncores = 5) #simulation parameters
sim <- netsim(est, param, init, control) #run the sim
plot(sim)
summary(sim, 500)
df <- as.data.frame(sim, out = "mean")
end <- Sys.time()
end - start
start <- Sys.time()
results <- vector("list", length = 10)
for (i in 1:10){
param <- param.net(inf.prob = 0.5, inf.prob.g1 = 0.75,
inter.eff = abs(rnorm(1)), inter.start = abs(rnorm(1, mean = 250, sd = 20)), # cure, distributions to be tuned, rnorms could be negative....
rec.rate = 0.001, rec.rate.g1 = 0.001) # recovery rate with immunity
#infection probability, efficacy of intervention, when does it intervene
init <- init.net(i.num = 5, r.num = 0) #how many people are infected/recovered at the start
control <- control.net(type = "SIR", nsteps = 500, nsims = 1, ncores = 5) #simulation parameters
sim <- netsim(est, param, init, control) #run the sim
df <- as.data.frame(sim, out = "mean")
results[[i]] <- df
}
#plot(sim)
#summary(sim, 500)
end <- Sys.time()
end - start
View(results)
View(results)
view(results[[1]])
View(results[[1]])
View(results[[1]])
